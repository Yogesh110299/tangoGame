<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Symbol Sudoku - Logic Puzzle</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
        }

        .game-container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            padding: 30px;
            max-width: 500px;
            width: 100%;
        }

        .game-title {
            text-align: center;
            font-size: 28px;
            font-weight: 700;
            color: #2c3e50;
            margin-bottom: 20px;
            background: linear-gradient(45deg, #3498db, #e74c3c);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 3px;
            background: #34495e;
            padding: 3px;
            border-radius: 12px;
            margin: 20px 0;
            max-width: 320px;
            margin-left: auto;
            margin-right: auto;
        }

        .cell {
            aspect-ratio: 1;
            background: #ecf0f1;
            border: none;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 32px;
            cursor: pointer;
            transition: all 0.2s ease;
            position: relative;
            min-height: 60px;
        }

        .cell:hover {
            background: #d5dbdb;
            transform: scale(1.05);
        }

        .cell.fixed {
            background: #bdc3c7;
            cursor: default;
        }

        .cell.fixed:hover {
            transform: none;
        }

        .cell.error {
            background: #e74c3c !important;
            color: white;
            animation: shake 0.5s ease-in-out;
        }

        .cell.hint {
            background: #f39c12 !important;
            color: white;
        }

        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            75% { transform: translateX(5px); }
        }

        .controls {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin: 20px 0;
            flex-wrap: wrap;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 25px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .btn-primary {
            background: linear-gradient(45deg, #3498db, #2980b9);
            color: white;
        }

        .btn-secondary {
            background: linear-gradient(45deg, #95a5a6, #7f8c8d);
            color: white;
        }

        .btn-success {
            background: linear-gradient(45deg, #27ae60, #2ecc71);
            color: white;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }

        .btn:active {
            transform: translateY(0);
        }

        .rules {
            background: #f8f9fa;
            border-radius: 12px;
            padding: 20px;
            margin-top: 20px;
            border-left: 4px solid #3498db;
        }

        .rules h3 {
            color: #2c3e50;
            margin-bottom: 15px;
            font-size: 18px;
        }

        .rules ul {
            list-style: none;
            padding: 0;
        }

        .rules li {
            margin: 8px 0;
            padding-left: 20px;
            position: relative;
            color: #34495e;
            line-height: 1.5;
        }

        .rules li:before {
            content: "â€¢";
            color: #3498db;
            font-weight: bold;
            position: absolute;
            left: 0;
        }

        .status {
            text-align: center;
            margin: 15px 0;
            font-size: 18px;
            font-weight: 600;
            min-height: 25px;
        }

        .status.success {
            color: #27ae60;
        }

        .status.error {
            color: #e74c3c;
        }

        .symbol-selector {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin: 20px 0;
        }

        .symbol-btn {
            width: 60px;
            height: 60px;
            border: 3px solid #bdc3c7;
            border-radius: 50%;
            background: white;
            font-size: 28px;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .symbol-btn:hover {
            border-color: #3498db;
            transform: scale(1.1);
        }

        .symbol-btn.active {
            border-color: #3498db;
            background: #3498db;
            color: white;
        }

        .progress {
            width: 100%;
            height: 8px;
            background: #ecf0f1;
            border-radius: 4px;
            overflow: hidden;
            margin: 15px 0;
        }

        .progress-bar {
            height: 100%;
            background: linear-gradient(45deg, #3498db, #2ecc71);
            width: 0%;
            transition: width 0.3s ease;
        }
    </style>
</head>
<body>
    <div class="game-container">
        <h1 class="game-title">Symbol Sudoku</h1>
        
        <div class="progress">
            <div class="progress-bar" id="progressBar"></div>
        </div>
        
        <div class="status" id="status"></div>
        
        <div class="grid" id="gameGrid"></div>
        
        <div class="symbol-selector">
            <button class="symbol-btn active" id="sunBtn" data-symbol="â˜€ï¸">â˜€ï¸</button>
            <button class="symbol-btn" id="moonBtn" data-symbol="ðŸŒ™">ðŸŒ™</button>
            <button class="symbol-btn" id="eraseBtn" data-symbol="">âœ–ï¸</button>
        </div>
        
        <div class="controls">
            <button class="btn btn-primary" onclick="newGame()">New Game</button>
            <button class="btn btn-secondary" onclick="getHint()">Hint</button>
            <button class="btn btn-secondary" onclick="checkSolution()">Check</button>
        </div>
        
        <div class="rules">
            <h3>How to Play</h3>
            <ul>
                <li>Fill the 4Ã—4 grid with suns â˜€ï¸ and moons ðŸŒ™</li>
                <li>Each row and column must contain exactly 2 suns and 2 moons</li>
                <li>No more than 2 consecutive identical symbols in any row or column</li>
                <li>Click a symbol above, then click empty cells to place it</li>
                <li>Use the eraser âœ–ï¸ to remove symbols</li>
            </ul>
        </div>
    </div>

    <script>
        let grid = Array(4).fill().map(() => Array(4).fill(''));
        let solution = [];
        let fixedCells = [];
        let selectedSymbol = 'â˜€ï¸';
        let hintsUsed = 0;

        // Predefined puzzles with solutions
        const puzzles = [
            {
                initial: [
                    ['â˜€ï¸', '', 'ðŸŒ™', ''],
                    ['â˜€ï¸', '', '', 'â˜€ï¸'],
                    ['', 'ðŸŒ™', '', 'â˜€ï¸'],
                    ['', 'â˜€ï¸', '', 'â˜€ï¸']
                ],
                solution: [
                    ['â˜€ï¸', 'ðŸŒ™', 'ðŸŒ™', 'â˜€ï¸'],
                    ['â˜€ï¸', 'ðŸŒ™', 'â˜€ï¸', 'ðŸŒ™'],
                    ['ðŸŒ™', 'ðŸŒ™', 'â˜€ï¸', 'â˜€ï¸'],
                    ['ðŸŒ™', 'â˜€ï¸', 'ðŸŒ™', 'â˜€ï¸']
                ]
            },
            {
                initial: [
                    ['', 'â˜€ï¸', '', 'ðŸŒ™'],
                    ['ðŸŒ™', '', 'â˜€ï¸', ''],
                    ['', '', 'ðŸŒ™', 'â˜€ï¸'],
                    ['â˜€ï¸', 'ðŸŒ™', '', '']
                ],
                solution: [
                    ['â˜€ï¸', 'â˜€ï¸', 'ðŸŒ™', 'ðŸŒ™'],
                    ['ðŸŒ™', 'ðŸŒ™', 'â˜€ï¸', 'â˜€ï¸'],
                    ['ðŸŒ™', 'â˜€ï¸', 'ðŸŒ™', 'â˜€ï¸'],
                    ['â˜€ï¸', 'ðŸŒ™', 'â˜€ï¸', 'ðŸŒ™']
                ]
            }
        ];

        function initGame() {
            createGrid();
            newGame();
        }

        function createGrid() {
            const gameGrid = document.getElementById('gameGrid');
            gameGrid.innerHTML = '';
            
            for (let i = 0; i < 4; i++) {
                for (let j = 0; j < 4; j++) {
                    const cell = document.createElement('button');
                    cell.className = 'cell';
                    cell.dataset.row = i;
                    cell.dataset.col = j;
                    cell.onclick = () => cellClick(i, j);
                    gameGrid.appendChild(cell);
                }
            }
        }

        function newGame() {
            hintsUsed = 0;
            const puzzle = puzzles[Math.floor(Math.random() * puzzles.length)];
            
            // Copy initial state and solution
            grid = puzzle.initial.map(row => [...row]);
            solution = puzzle.solution.map(row => [...row]);
            
            // Track fixed cells
            fixedCells = [];
            for (let i = 0; i < 4; i++) {
                for (let j = 0; j < 4; j++) {
                    if (grid[i][j] !== '') {
                        fixedCells.push(`${i},${j}`);
                    }
                }
            }
            
            updateDisplay();
            updateStatus('');
            updateProgress();
        }

        function cellClick(row, col) {
            if (fixedCells.includes(`${row},${col}`)) return;
            
            // Clear any previous error states
            clearErrors();
            
            if (selectedSymbol === '') {
                grid[row][col] = '';
            } else {
                grid[row][col] = selectedSymbol;
            }
            
            updateDisplay();
            updateProgress();
            
            if (checkWin()) {
                updateStatus('ðŸŽ‰ Congratulations! You solved it!', 'success');
            }
        }

        function updateDisplay() {
            const cells = document.querySelectorAll('.cell');
            cells.forEach((cell, index) => {
                const row = Math.floor(index / 4);
                const col = index % 4;
                
                cell.textContent = grid[row][col];
                cell.className = 'cell';
                
                if (fixedCells.includes(`${row},${col}`)) {
                    cell.classList.add('fixed');
                }
            });
        }

        function selectSymbol(symbol) {
            selectedSymbol = symbol;
            document.querySelectorAll('.symbol-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            
            if (symbol === 'â˜€ï¸') {
                document.getElementById('sunBtn').classList.add('active');
            } else if (symbol === 'ðŸŒ™') {
                document.getElementById('moonBtn').classList.add('active');
            } else {
                document.getElementById('eraseBtn').classList.add('active');
            }
        }

        function checkSolution() {
            clearErrors();
            const errors = [];
            
            // Check rows and columns
            for (let i = 0; i < 4; i++) {
                // Check row
                const rowSuns = grid[i].filter(cell => cell === 'â˜€ï¸').length;
                const rowMoons = grid[i].filter(cell => cell === 'ðŸŒ™').length;
                
                if (grid[i].every(cell => cell !== '')) {
                    if (rowSuns !== 2 || rowMoons !== 2) {
                        for (let j = 0; j < 4; j++) {
                            errors.push(`${i},${j}`);
                        }
                    }
                }
                
                // Check column
                const colSuns = grid.map(row => row[i]).filter(cell => cell === 'â˜€ï¸').length;
                const colMoons = grid.map(row => row[i]).filter(cell => cell === 'ðŸŒ™').length;
                
                if (grid.every(row => row[i] !== '')) {
                    if (colSuns !== 2 || colMoons !== 2) {
                        for (let j = 0; j < 4; j++) {
                            errors.push(`${j},${i}`);
                        }
                    }
                }
            }
            
            // Check consecutive symbols
            for (let i = 0; i < 4; i++) {
                // Check rows for consecutive symbols
                for (let j = 0; j <= 1; j++) {
                    if (grid[i][j] !== '' && grid[i][j] === grid[i][j+1] && grid[i][j+1] === grid[i][j+2]) {
                        errors.push(`${i},${j}`, `${i},${j+1}`, `${i},${j+2}`);
                    }
                }
                
                // Check columns for consecutive symbols
                for (let j = 0; j <= 1; j++) {
                    if (grid[j][i] !== '' && grid[j][i] === grid[j+1][i] && grid[j+1][i] === grid[j+2][i]) {
                        errors.push(`${j},${i}`, `${j+1},${i}`, `${j+2},${i}`);
                    }
                }
            }
            
            if (errors.length > 0) {
                showErrors(errors);
                updateStatus('âŒ There are some errors in your solution', 'error');
            } else if (grid.every(row => row.every(cell => cell !== ''))) {
                updateStatus('âœ… Perfect! All rules satisfied!', 'success');
            } else {
                updateStatus('âœ… Looking good so far! Keep going!', 'success');
            }
        }

        function showErrors(errorCells) {
            const cells = document.querySelectorAll('.cell');
            errorCells.forEach(cellPos => {
                const [row, col] = cellPos.split(',').map(Number);
                const index = row * 4 + col;
                if (cells[index]) {
                    cells[index].classList.add('error');
                }
            });
            
            setTimeout(clearErrors, 2000);
        }

        function clearErrors() {
            document.querySelectorAll('.cell').forEach(cell => {
                cell.classList.remove('error', 'hint');
            });
        }

        function getHint() {
            clearErrors();
            
            // Find an empty cell that can be filled
            const emptyCells = [];
            for (let i = 0; i < 4; i++) {
                for (let j = 0; j < 4; j++) {
                    if (grid[i][j] === '' && !fixedCells.includes(`${i},${j}`)) {
                        emptyCells.push([i, j]);
                    }
                }
            }
            
            if (emptyCells.length === 0) {
                updateStatus('No empty cells to hint!', 'error');
                return;
            }
            
            const [row, col] = emptyCells[Math.floor(Math.random() * emptyCells.length)];
            const cells = document.querySelectorAll('.cell');
            const cellIndex = row * 4 + col;
            
            cells[cellIndex].classList.add('hint');
            cells[cellIndex].textContent = solution[row][col];
            
            updateStatus(`ðŸ’¡ Hint: Cell in row ${row + 1}, column ${col + 1} should be ${solution[row][col]}`, 'success');
            
            setTimeout(() => {
                cells[cellIndex].classList.remove('hint');
                cells[cellIndex].textContent = grid[row][col];
            }, 3000);
            
            hintsUsed++;
        }

        function checkWin() {
            // Check if grid is complete
            if (!grid.every(row => row.every(cell => cell !== ''))) {
                return false;
            }
            
            // Check if solution matches
            for (let i = 0; i < 4; i++) {
                for (let j = 0; j < 4; j++) {
                    if (grid[i][j] !== solution[i][j]) {
                        return false;
                    }
                }
            }
            
            return true;
        }

        function updateStatus(message, type = '') {
            const status = document.getElementById('status');
            status.textContent = message;
            status.className = `status ${type}`;
        }

        function updateProgress() {
            const totalCells = 16;
            const filledCells = grid.flat().filter(cell => cell !== '').length;
            const percentage = (filledCells / totalCells) * 100;
            
            document.getElementById('progressBar').style.width = `${percentage}%`;
        }

        // Event listeners for symbol selection
        document.getElementById('sunBtn').onclick = () => selectSymbol('â˜€ï¸');
        document.getElementById('moonBtn').onclick = () => selectSymbol('ðŸŒ™');
        document.getElementById('eraseBtn').onclick = () => selectSymbol('');

        // Initialize the game
        initGame();
    </script>
</body>
</html>
