<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Grid Game - BCP Challenge</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        .game-container {
            max-width: 1200px;
            width: 100%;
            padding: 20px;
            text-align: center;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .header h1 {
            color: #2c3e50;
            font-size: 2.5em;
            margin-bottom: 10px;
        }

        .game-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin: 20px 0;
            background: rgba(255, 255, 255, 0.9);
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
        }

        .level-info {
            font-size: 1.2em;
            font-weight: bold;
            color: #2c3e50;
        }

        .game-progress {
            font-size: 1.2em;
            font-weight: bold;
            color: #0bc038e7;
        }

        .timer {
            font-size: 1.5em;
            font-weight: bold;
            color: #e74c3c;
        }

        .controls {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin: 20px 0;
        }

        .btn {
            padding: 12px 24px;
            font-size: 1em;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: bold;
            text-transform: uppercase;
        }

        .btn-primary {
            background: #3498db;
            color: white;
        }

        .btn-secondary {
            background: #95a5a6;
            color: white;
        }

        .btn-danger {
            background: #e74c3c;
            color: white;
        }

        .btn-success {
            background: #27ae60;
            color: white;
        }

        .btn:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.2);
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        .game-grid {
            display: grid;
            gap: 3px;
            justify-content: center;
            margin: 20px auto;
            background: rgba(255, 255, 255, 0.9);
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            transition: all 0.5s ease;
        }

        .game-grid.completed {
            background: rgba(248, 250, 249, 0);
            box-shadow: 0 0 30px rgba(249, 252, 250, 0);
            animation: completedGlow 2s ease-in-out;
        }

        @keyframes completedGlow {

            0%,
            100% {
                box-shadow: 0 0 30px rgba(39, 174, 96, 0.5);
            }

            50% {
                box-shadow: 0 0 50px rgba(78, 227, 140, 0.8);
            }
        }

        .grid-cell {
            width: 60px;
            height: 60px;
            border: 2px solid #bdc3c7;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2em;
            cursor: pointer;
            transition: all 0.3s ease;
            background: white;
            position: relative;
            overflow: hidden;
        }

        .game-grid.completed .grid-cell {
            border-color: #64e499;
            background: rgba(255, 255, 255, 0.95);
            animation: cellGlow 1.5s ease-in-out infinite alternate;
        }

        @keyframes cellGlow {
            0% {
                background: rgba(255, 255, 255, 0.95);
            }

            100% {
                background: rgba(39, 174, 96, 0.1);
            }
        }

        .grid-cell:hover:not(.prefilled) {
            border-color: #3498db;
            transform: scale(1.05);
        }

        .grid-cell.prefilled {
            background: #ecf0f1;
            border-color: #95a5a6;
            cursor: not-allowed;
        }

        .grid-cell.violation {
            animation: violation 1s ease-in-out;
        }

        .grid-cell.hint {
            animation: hint 2s ease-in-out;
            border-color: #f39c12;
            background: rgba(243, 156, 18, 0.1);
        }

        @keyframes violation {

            0%,
            100% {
                background: white;
            }

            50% {
                background: repeating-linear-gradient(45deg, #e74c3c, #e74c3c 10px, white 10px, white 20px);
            }
        }

        @keyframes hint {

            0%,
            100% {
                opacity: 1;
            }

            50% {
                opacity: 0.6;
            }
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            z-index: 1000;
        }

        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 30px;
            border-radius: 15px;
            max-width: 600px;
            width: 90%;
            text-align: center;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            line-height: 1.6;
        }

        .modal h2 {
            color: #2c3e50;
            margin-bottom: 20px;
            font-size: 1.8em;
        }

        .modal p {
            color: #555;
            margin-bottom: 20px;
            text-align: left;
            padding: 0 10px;
        }

        .modal-message {
            background: rgba(52, 152, 219, 0.1);
            padding: 15px;
            border-radius: 10px;
            margin: 20px 0;
            border-left: 4px solid #3498db;
            font-weight: bold;
            color: #2c3e50;
        }

        .modal-lesson {
            color: #2c3e50;
            margin-bottom: 20px;
            font-size: 1.8em;
        }

        .scenario-message {
            background: rgba(243, 156, 18, 0.1);
            padding: 15px;
            border-radius: 10px;
            margin: 20px 0;
            border-left: 4px solid #f39c12;
            font-weight: bold;
            color: #2c3e50;
        }

        .modal-buttons {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin-top: 25px;
        }

        .leaderboard {
            background: rgba(255, 255, 255, 0.95);
            padding: 20px;
            border-radius: 15px;
            margin-top: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .leaderboard h3 {
            color: #2c3e50;
            margin-bottom: 15px;
            font-size: 1.5em;
        }

        .leaderboard-entry {
            display: flex;
            justify-content: space-between;
            padding: 10px;
            border-bottom: 1px solid #ecf0f1;
        }

        .rules {
            background: rgba(255, 255, 255, 0.9);
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
            text-align: left;
            max-width: 600px;
            margin: 20px auto;
        }

        .rules h3 {
            color: #2c3e50;
            margin-bottom: 15px;
        }

        .rules ul {
            padding-left: 20px;
        }

        .rules li {
            margin-bottom: 10px;
            color: #555;
        }

        #next-level-main-btn {
            display: none;
        }
    </style>
</head>

<body>
    <div class="game-container">
        <div class="header">
            <h1>Grid Game</h1>
            <h2>BCP Challenge</h2>
        </div>

        <div class="game-info">
            <div class="level-info">
                <span id="current-level">Round 1 - Easy</span>
                <span id="grid-size">(4x4)</span>
            </div>
            <div class="game-progress">
                <span id="level-result"> </span>
            </div>
            <div class="timer">
                ‚è±Ô∏è Time: <span id="timer">00:00</span>
            </div>
        </div>

        <div class="controls">
            <button class="btn btn-primary" id="start-btn">Start Game</button>
            <button class="btn btn-secondary" id="clear-btn" disabled>Clear Grid</button>
            <button class="btn btn-danger" id="restart-btn" disabled>Restart</button>
            <button class="btn btn-success" id="next-level-main-btn">Next Level</button>
        </div>

        <div class="game-grid" id="game-grid"></div>

        <div class="rules">
            <h3>Game Rules:</h3>
            <ul>
                <li>Fill the grid so that each cell contains either üõ°Ô∏è (safe) or ‚ö†Ô∏è (danger)</li>
                <li>No more than 2 identical symbols may be next to each other (horizontally or vertically)</li>
                <ul>
                    <li>üõ°Ô∏èüõ°Ô∏è ‚úîÔ∏è</li>
                    <li>üõ°Ô∏èüõ°Ô∏èüõ°Ô∏è ‚ùå</li>
                </ul>
                <li>Each row and column must contain equal numbers of üõ°Ô∏è and ‚ö†Ô∏è</li>
                <li>Click on cells to toggle between symbols</li>
                <li>Complete all 4 rounds to master Business Continuity Planning!</li>
            </ul>
        </div>

        <div class="leaderboard">
            <h3>üèÜ Leaderboard</h3>
            <div id="leaderboard-content">
                <div class="leaderboard-entry">
                    <span>No games completed yet</span>
                    <span>--:--</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal for BCP Scenarios (Start of Game) -->
    <div class="modal" id="scenario-modal">
        <div class="modal-content">
            <h2 id="scenario-modal-title"></h2>
            <p id="scenario-modal-content"></p>
            <div class="scenario-message" id="scenario-modal-message"></div>
            <div class="modal-buttons">
                <button class="btn btn-success" id="continue-game-btn">Continue to Game</button>
            </div>
        </div>
    </div>

    <!-- Modal for BCP Facts (End of Level) -->
    <div class="modal" id="fact-modal">
        <div class="modal-content">
            <h2 id="modal-title"></h2>
            <div class="modal-lesson" id="modal-lesson"></div>
            <div class="modal-message" id="modal-message"></div>
            <div class="modal-buttons">
                <button class="btn btn-primary" id="next-level-btn">Next Level</button>
                <button class="btn btn-secondary" id="close-modal-btn">Close</button>
            </div>
        </div>
    </div>

    <script type="text/javascript">
        function initMyClass() {
            class TangoGame {
                constructor() {
                    this.currentLevel = 1;
                    this.maxLevel = 4;
                    this.grid = [];
                    this.prefilled = [];
                    this.gameStarted = false;
                    this.startTime = 0;
                    this.currentTime = 0;
                    this.timerInterval = null;
                    this.leaderboard = [];
                    this.levelCompleted = false;

                    this.levels = {
                        1: { size: 4, prefilled: 3, name: "Round 1 - Easy", hintDuration: 3000 },
                        2: { size: 4, prefilled: 2, name: "Round 2 - Medium", hintDuration: 2000 },
                        3: { size: 6, prefilled: 5, name: "Round 3 - Expert", hintDuration: 1500 },
                        4: { size: 6, prefilled: 4, name: "Round 4 - Advanced", hintDuration: 1000 }
                    };

                    this.bcpFacts = {
                        1: {
                            title: "The Great Coffee Spill Crisis",
                            content: "In 2019, a panicked intern at a tech firm spilled an entire cup of coffee onto the main server. The Company had no BCP or redundant system.\n\nResults: 6 hours of downtime, no access to email and a new office rule: no beverages near IT equipment.",
                            lesson: "Lesson: Protect your assets and your coffee",
                            message: "Crisis Averted! Remember: No drinks near servers"
                        },
                        2: {
                            title: "The Wi-Fi Apocalypse",
                            content: "A famous retail chain's entire branch network went down because someone unplugged the router to charge their phone.\n\nResults: No internet, no BCP call tree and no sales for 4 hours",
                            lesson: "Lesson: Always plan for the human factor, and maybe invest in a multi-port charger.",
                            message: "Wi-Fi restored! And so are sales."
                        },
                        3: {
                            title: "The Mystery IT Guy",
                            content: "During a planned data center drill, the company realized no one knew how to initiate the recovery plan because the IT guy had left... 3 years ago. There was no updated contact list.",
                            lesson: "Lesson: Update your escalation matrix before your IT guy turns into an urban legend",
                            message: "Someone call IT!"
                        },
                        4: {
                            title: "The Zombie Invasion Tabletop",
                            content: "A team ran BCP tabletop exercise using a zombie outbreak scenario. It went viral and the fake news reached the local media. The company had to issue a press release clarifying it wasn't real",
                            lesson: "Lesson: Creative BCP scenarios are great: just remember to tell everyone it's a drill.",
                            message: "Outbreak contained. Next drill: alien invasion?"
                        }
                    };

                    this.initializeGame();
                    this.setupEventListeners();
                    this.updateLeaderboard();
                }

                initializeGame() {
                    this.createGrid();
                    this.updateDisplay();
                }

                setupEventListeners() {
                    document.getElementById('start-btn').addEventListener('click', () => this.showScenario());
                    document.getElementById('continue-game-btn').addEventListener('click', () => this.startGameAfterScenario());
                    document.getElementById('clear-btn').addEventListener('click', () => this.clearGrid());
                    document.getElementById('restart-btn').addEventListener('click', () => this.restartGame());
                    document.getElementById('next-level-btn').addEventListener('click', () => this.nextLevel());
                    document.getElementById('next-level-main-btn').addEventListener('click', () => this.nextLevel());
                    document.getElementById('close-modal-btn').addEventListener('click', () => this.closeModal());
                }

                showScenario() {
                    const fact = this.bcpFacts[this.currentLevel];
                    document.getElementById('scenario-modal-title').textContent = fact.title;
                    document.getElementById('scenario-modal-content').textContent = fact.content;
                    document.getElementById('scenario-modal-message').textContent = "Ready to handle this crisis? Let's start the game!";

                    document.getElementById('scenario-modal').style.display = 'block';
                }

                startGameAfterScenario() {
                    // Close scenario modal
                    document.getElementById('scenario-modal').style.display = 'none';

                    // Start the actual game
                    this.startGame();
                }

                createGrid() {
                    const level = this.levels[this.currentLevel];
                    const gridElement = document.getElementById('game-grid');

                    gridElement.style.gridTemplateColumns = `repeat(${level.size}, 60px)`;
                    gridElement.innerHTML = '';
                    gridElement.classList.remove('completed');

                    this.grid = Array(level.size).fill(null).map(() => Array(level.size).fill(''));
                    this.prefilled = [];
                    this.levelCompleted = false;

                    // Generate prefilled cells
                    this.generatePrefilledCells();

                    // Create grid cells
                    for (let row = 0; row < level.size; row++) {
                        for (let col = 0; col < level.size; col++) {
                            const cell = document.createElement('div');
                            cell.className = 'grid-cell';
                            cell.dataset.row = row;
                            cell.dataset.col = col;

                            const isPrefilled = this.prefilled.some(p => p.row === row && p.col === col);
                            if (isPrefilled) {
                                cell.classList.add('prefilled');
                                const prefilledData = this.prefilled.find(p => p.row === row && p.col === col);
                                cell.textContent = prefilledData.symbol;
                                this.grid[row][col] = prefilledData.symbol;
                            }

                            if (!isPrefilled) {
                                cell.addEventListener('click', () => this.toggleCell(row, col));
                            }

                            gridElement.appendChild(cell);
                        }
                    }
                }

                generatePrefilledCells() {
                    const level = this.levels[this.currentLevel];
                    const symbols = ['üõ°Ô∏è', '‚ö†Ô∏è'];

                    for (let i = 0; i < level.prefilled; i++) {
                        let row, col;
                        do {
                            row = Math.floor(Math.random() * level.size);
                            col = Math.floor(Math.random() * level.size);
                        } while (this.prefilled.some(p => p.row === row && p.col === col));

                        const symbol = symbols[Math.floor(Math.random() * symbols.length)];
                        this.prefilled.push({ row, col, symbol });
                    }
                }

                toggleCell(row, col) {
                    if (!this.gameStarted) return;

                    const symbols = ['', 'üõ°Ô∏è', '‚ö†Ô∏è'];
                    const currentIndex = symbols.indexOf(this.grid[row][col]);
                    const nextIndex = (currentIndex + 1) % symbols.length;

                    this.grid[row][col] = symbols[nextIndex];
                    this.updateCellDisplay(row, col);

                    // Check for violations
                    this.checkViolations(row, col);

                    // Check if level is complete
                    if (this.isLevelComplete()) {
                        this.completeLevel();
                    }

                    // Show hints
                    this.showHints();
                }

                updateCellDisplay(row, col) {
                    const cell = document.querySelector(`[data-row="${row}"][data-col="${col}"]`);
                    cell.textContent = this.grid[row][col];
                }

                checkViolations(row, col) {
                    const symbol = this.grid[row][col];
                    if (!symbol) return;

                    // Check horizontal violations
                    this.checkHorizontalViolations(row, col, symbol);

                    // Check vertical violations
                    this.checkVerticalViolations(row, col, symbol);
                }

                checkHorizontalViolations(row, col, symbol) {
                    // Check left-left-current
                    if (col >= 2 && this.grid[row][col - 1] === symbol && this.grid[row][col - 2] === symbol) {
                        this.showViolation(row, col - 2);
                        this.showViolation(row, col - 1);
                        this.showViolation(row, col);
                    }

                    // Check left-current-right
                    if (col >= 1 && col < this.grid[row].length - 1 &&
                        this.grid[row][col - 1] === symbol && this.grid[row][col + 1] === symbol) {
                        this.showViolation(row, col - 1);
                        this.showViolation(row, col);
                        this.showViolation(row, col + 1);
                    }

                    // Check current-right-right
                    if (col < this.grid[row].length - 2 &&
                        this.grid[row][col + 1] === symbol && this.grid[row][col + 2] === symbol) {
                        this.showViolation(row, col);
                        this.showViolation(row, col + 1);
                        this.showViolation(row, col + 2);
                    }
                }

                checkVerticalViolations(row, col, symbol) {
                    // Check top-top-current
                    if (row >= 2 && this.grid[row - 1][col] === symbol && this.grid[row - 2][col] === symbol) {
                        this.showViolation(row - 2, col);
                        this.showViolation(row - 1, col);
                        this.showViolation(row, col);
                    }

                    // Check top-current-bottom
                    if (row >= 1 && row < this.grid.length - 1 &&
                        this.grid[row - 1][col] === symbol && this.grid[row + 1][col] === symbol) {
                        this.showViolation(row - 1, col);
                        this.showViolation(row, col);
                        this.showViolation(row + 1, col);
                    }

                    // Check current-bottom-bottom
                    if (row < this.grid.length - 2 &&
                        this.grid[row + 1][col] === symbol && this.grid[row + 2][col] === symbol) {
                        this.showViolation(row, col);
                        this.showViolation(row + 1, col);
                        this.showViolation(row + 2, col);
                    }
                }

                showViolation(row, col) {
                    const cell = document.querySelector(`[data-row="${row}"][data-col="${col}"]`);
                    cell.classList.add('violation');
                    setTimeout(() => cell.classList.remove('violation'), 500);
                }

                showHints() {
                    if (!this.gameStarted) return;

                    const level = this.levels[this.currentLevel];
                    const hints = this.generateHints();

                    hints.forEach(hint => {
                        const cell = document.querySelector(`[data-row="${hint.row}"][data-col="${hint.col}"]`);
                        cell.classList.add('hint');
                        setTimeout(() => cell.classList.remove('hint'), level.hintDuration);
                    });
                }

                generateHints() {
                    const hints = [];
                    const level = this.levels[this.currentLevel];

                    for (let row = 0; row < level.size; row++) {
                        for (let col = 0; col < level.size; col++) {
                            if (this.grid[row][col] === '' && !this.prefilled.some(p => p.row === row && p.col === col)) {
                                const possibleSymbols = this.getPossibleSymbols(row, col);
                                if (possibleSymbols.length === 1) {
                                    hints.push({ row, col, symbol: possibleSymbols[0] });
                                }
                            }
                        }
                    }

                    return hints.slice(0, 1);
                }

                getPossibleSymbols(row, col) {
                    const symbols = ['üõ°Ô∏è', '‚ö†Ô∏è'];
                    const possible = [];

                    for (const symbol of symbols) {
                        if (this.canPlaceSymbol(row, col, symbol)) {
                            possible.push(symbol);
                        }
                    }

                    return possible;
                }

                canPlaceSymbol(row, col, symbol) {
                    // Check horizontal constraints
                    if (!this.checkHorizontalConstraints(row, col, symbol)) return false;

                    // Check vertical constraints
                    if (!this.checkVerticalConstraints(row, col, symbol)) return false;

                    // Check row/column balance
                    if (!this.checkBalanceConstraints(row, col, symbol)) return false;

                    return true;
                }

                checkHorizontalConstraints(row, col, symbol) {
                    // Check if placing this symbol would create 3 in a row
                    const rowData = this.grid[row];

                    // Check left side
                    if (col >= 2 && rowData[col - 1] === symbol && rowData[col - 2] === symbol) return false;

                    // Check middle
                    if (col >= 1 && col < rowData.length - 1 &&
                        rowData[col - 1] === symbol && rowData[col + 1] === symbol) return false;

                    // Check right side
                    if (col < rowData.length - 2 && rowData[col + 1] === symbol && rowData[col + 2] === symbol) return false;

                    return true;
                }

                checkVerticalConstraints(row, col, symbol) {
                    // Check if placing this symbol would create 3 in a column

                    // Check top side
                    if (row >= 2 && this.grid[row - 1][col] === symbol && this.grid[row - 2][col] === symbol) return false;

                    // Check middle
                    if (row >= 1 && row < this.grid.length - 1 &&
                        this.grid[row - 1][col] === symbol && this.grid[row + 1][col] === symbol) return false;

                    // Check bottom side
                    if (row < this.grid.length - 2 &&
                        this.grid[row + 1][col] === symbol && this.grid[row + 2][col] === symbol) return false;

                    return true;
                }

                checkBalanceConstraints(row, col, symbol) {
                    const level = this.levels[this.currentLevel];
                    const targetCount = level.size / 2;

                    // Check row balance
                    const rowCount = this.grid[row].filter(cell => cell === symbol).length;
                    if (rowCount >= targetCount) return false;

                    // Check column balance
                    const colCount = this.grid.map(row => row[col]).filter(cell => cell === symbol).length;
                    if (colCount >= targetCount) return false;

                    return true;
                }

                isLevelComplete() {
                    const level = this.levels[this.currentLevel];

                    // Check if all cells are filled
                    for (let row = 0; row < level.size; row++) {
                        for (let col = 0; col < level.size; col++) {
                            if (this.grid[row][col] === '') return false;
                        }
                    }

                    // Check if all rules are satisfied
                    return this.validateGrid();
                }

                validateGrid() {
                    const level = this.levels[this.currentLevel];
                    const targetCount = level.size / 2;

                    // Check each row
                    for (let row = 0; row < level.size; row++) {
                        const rowData = this.grid[row];
                        const shieldCount = rowData.filter(cell => cell === 'üõ°Ô∏è').length;
                        const warningCount = rowData.filter(cell => cell === '‚ö†Ô∏è').length;

                        if (shieldCount !== targetCount || warningCount !== targetCount) return false;

                        // Check for 3 consecutive symbols
                        for (let col = 0; col < level.size - 2; col++) {
                            if (rowData[col] === rowData[col + 1] && rowData[col + 1] === rowData[col + 2]) return false;
                        }
                    }

                    // Check each column
                    for (let col = 0; col < level.size; col++) {
                        const colData = this.grid.map(row => row[col]);
                        const shieldCount = colData.filter(cell => cell === 'üõ°Ô∏è').length;
                        const warningCount = colData.filter(cell => cell === '‚ö†Ô∏è').length;

                        if (shieldCount !== targetCount || warningCount !== targetCount) return false;

                        // Check for 3 consecutive symbols
                        for (let row = 0; row < level.size - 2; row++) {
                            if (colData[row] === colData[row + 1] && colData[row + 1] === colData[row + 2]) return false;
                        }
                    }

                    return true;
                }

                completeLevel() {
                    this.stopTimer();
                    this.gameStarted = false;
                    this.levelCompleted = true;

                    // Add green glow effect to the grid
                    const gridElement = document.getElementById('game-grid');
                    gridElement.classList.add('completed');

                    // Update leaderboard
                    this.updateLeaderboardData();

                    this.updateLevelProgress();

                    setTimeout(() => { this.showBCPFact(); }, 3000);
                }

                updateLevelProgress() {
                    const level = this.levels[this.currentLevel];
                    document.getElementById('level-result').textContent = "üéâCongratulations..! You have completed Round " + this.currentLevel + "üéâ";
                }

                showBCPFact() {
                    const fact = this.bcpFacts[this.currentLevel];
                    
                    document.getElementById('modal-title').textContent = "Level Complete!";
                    document.getElementById('modal-lesson').textContent = fact.lesson;
                    document.getElementById('modal-message').textContent = fact.message;

                    const nextBtn = document.getElementById('next-level-btn');
                    if (this.currentLevel < this.maxLevel) {
                        nextBtn.style.display = 'inline-block';
                        nextBtn.textContent = 'Next Level';
                    } else {
                        nextBtn.style.display = 'inline-block';
                        nextBtn.textContent = 'Game Complete!';
                    }

                    document.getElementById('fact-modal').style.display = 'block';
                }

                nextLevel() {
                    this.closeModal();

                    if (this.currentLevel < this.maxLevel) {
                        this.currentLevel++;
                        this.createGrid();
                        this.updateDisplay();
                        this.resetTimer();
                        this.resetButtonStates();
                        document.getElementById('start-btn').disabled = false;
                    } else {
                        // Game complete
                        alert('Congratulations! You\'ve completed all levels and mastered Business Continuity Planning!');
                        this.currentLevel = 1;
                        this.createGrid();
                        this.updateDisplay();
                        this.resetTimer();
                        this.resetButtonStates();
                    }
                }

                closeModal() {
                    document.getElementById('fact-modal').style.display = 'none';

                    // If level was completed, enable Next Level button and disable others
                    if (this.levelCompleted) {
                        document.getElementById('start-btn').disabled = true;
                        document.getElementById('clear-btn').disabled = true;
                        document.getElementById('restart-btn').disabled = true;
                        document.getElementById('next-level-main-btn').style.display = 'inline-block';
                        document.getElementById('next-level-main-btn').disabled = false;
                    }
                }

                resetButtonStates() {
                    document.getElementById('start-btn').disabled = false;
                    document.getElementById('clear-btn').disabled = true;
                    document.getElementById('restart-btn').disabled = true;
                    document.getElementById('next-level-main-btn').style.display = 'none';
                    document.getElementById('next-level-main-btn').disabled = true;
                    this.levelCompleted = false;
                }

                startGame() {
                    this.gameStarted = true;
                    this.startTimer();

                    document.getElementById('start-btn').disabled = true;
                    document.getElementById('clear-btn').disabled = false;
                    document.getElementById('restart-btn').disabled = false;
                    document.getElementById('next-level-main-btn').style.display = 'none';

                    this.showHints();
                }

                clearGrid() {
                    if (!this.gameStarted) return;

                    const level = this.levels[this.currentLevel];

                    for (let row = 0; row < level.size; row++) {
                        for (let col = 0; col < level.size; col++) {
                            if (!this.prefilled.some(p => p.row === row && p.col === col)) {
                                this.grid[row][col] = '';
                                this.updateCellDisplay(row, col);
                            }
                        }
                    }
                }

                restartGame() {
                    this.stopTimer();
                    this.gameStarted = true;
                    this.resetTimer();
                    this.createGrid();
                    this.updateDisplay();
                    this.startTimer();

                    document.getElementById('start-btn').disabled = true;
                    document.getElementById('clear-btn').disabled = false;
                    document.getElementById('restart-btn').disabled = false;
                    document.getElementById('next-level-main-btn').style.display = 'none';
                }

                startTimer() {
                    this.startTime = Date.now();
                    this.timerInterval = setInterval(() => {
                        this.currentTime = Date.now() - this.startTime;
                        this.updateTimerDisplay();
                    }, 1000);
                }

                stopTimer() {
                    if (this.timerInterval) {
                        clearInterval(this.timerInterval);
                        this.timerInterval = null;
                    }
                }

                resetTimer() {
                    this.stopTimer();
                    this.currentTime = 0;
                    this.updateTimerDisplay();
                }

                updateTimerDisplay() {
                    const minutes = Math.floor(this.currentTime / 60000);
                    const seconds = Math.floor((this.currentTime % 60000) / 1000);
                    const display = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                    document.getElementById('timer').textContent = display;
                }

                updateDisplay() {
                    const level = this.levels[this.currentLevel];
                    document.getElementById('current-level').textContent = level.name;
                    document.getElementById('grid-size').textContent = `(${level.size}x${level.size})`;
                    document.getElementById('level-result').textContent = "";
                }

                updateLeaderboardData() {
                    const entry = {
                        level: this.currentLevel,
                        time: this.currentTime,
                        timestamp: Date.now()
                    };

                    this.leaderboard.push(entry);
                    this.leaderboard.sort((a, b) => {
                        if (a.level !== b.level) return b.level - a.level;
                        return a.time - b.time;
                    });

                    this.leaderboard = this.leaderboard.slice(0, 10);
                    this.updateLeaderboard();
                }

                updateLeaderboard() {
                    const leaderboardContent = document.getElementById('leaderboard-content');

                    if (this.leaderboard.length === 0) {
                        leaderboardContent.innerHTML = '<div class="leaderboard-entry"><span>No games completed yet</span><span>--:--</span></div>';
                        return;
                    }

                    leaderboardContent.innerHTML = '';

                    this.leaderboard.forEach((entry, index) => {
                        const minutes = Math.floor(entry.time / 60000);
                        const seconds = Math.floor((entry.time % 60000) / 1000);
                        const timeDisplay = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

                        const entryDiv = document.createElement('div');
                        entryDiv.className = 'leaderboard-entry';
                        entryDiv.innerHTML = `
                        <span>#${index + 1} - Level ${entry.level}</span>
                        <span>${timeDisplay}</span>
                    `;
                        leaderboardContent.appendChild(entryDiv);
                    });
                }
            }

            new TangoGame();
        }

        if (document.readyState === 'complete' || document.readyState === 'interactive') {
            initMyClass();
        } else {
            document.addEventListener('DOMContentLoaded', function () {
                initMyClass();
            });
        }
    </script>
</body>

</html>
