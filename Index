<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Symbol Sudoku - Multi-Level Logic Puzzle</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
        }

        .game-container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            padding: 30px;
            max-width: 600px;
            width: 100%;
        }

        .game-title {
            text-align: center;
            font-size: 28px;
            font-weight: 700;
            color: #2c3e50;
            margin-bottom: 10px;
            background: linear-gradient(45deg, #3498db, #e74c3c);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .level-info {
            text-align: center;
            margin-bottom: 20px;
            padding: 10px;
            background: linear-gradient(45deg, #3498db, #2ecc71);
            border-radius: 15px;
            color: white;
            font-weight: 600;
        }

        .grid {
            display: grid;
            gap: 3px;
            background: #34495e;
            padding: 3px;
            border-radius: 12px;
            margin: 20px auto;
            max-width: 500px;
            position: relative;
        }

        .grid.size-4 { grid-template-columns: repeat(4, 1fr); max-width: 320px; }
        .grid.size-5 { grid-template-columns: repeat(5, 1fr); max-width: 400px; }
        .grid.size-6 { grid-template-columns: repeat(6, 1fr); max-width: 480px; }
        .grid.size-7 { grid-template-columns: repeat(7, 1fr); max-width: 500px; }

        .cell {
            aspect-ratio: 1;
            background: #ecf0f1;
            border: none;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            cursor: pointer;
            transition: all 0.2s ease;
            position: relative;
            min-height: 50px;
        }

        .grid.size-4 .cell { font-size: 28px; min-height: 60px; }
        .grid.size-5 .cell { font-size: 26px; min-height: 55px; }
        .grid.size-6 .cell { font-size: 24px; min-height: 50px; }
        .grid.size-7 .cell { font-size: 22px; min-height: 45px; }

        .cell:hover {
            background: #d5dbdb;
            transform: scale(1.05);
        }

        .cell.fixed {
            background: #bdc3c7;
            cursor: default;
        }

        .cell.fixed:hover {
            transform: none;
        }

        .cell.error {
            background: #e74c3c !important;
            color: white;
            animation: shake 0.5s ease-in-out;
        }

        .cell.hint {
            background: #f39c12 !important;
            color: white;
        }

        .cell.violation {
            background: #e74c3c !important;
            color: white;
            animation: violationShake 1s ease-in-out;
        }

        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            75% { transform: translateX(5px); }
        }

        @keyframes violationShake {
            0%, 100% { transform: translateX(0); }
            10%, 30%, 50%, 70%, 90% { transform: translateX(-10px); }
            20%, 40%, 60%, 80% { transform: translateX(10px); }
        }

        .hint-marker {
            position: absolute;
            font-size: 12px;
            font-weight: bold;
            color: #3498db;
            pointer-events: none;
        }

        .hint-marker.same { 
            top: 2px; 
            right: 2px; 
            color: #27ae60;
        }

        .hint-marker.opposite { 
            bottom: 2px; 
            left: 2px; 
            color: #e74c3c;
        }

        .controls {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin: 20px 0;
            flex-wrap: wrap;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 25px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .btn-primary {
            background: linear-gradient(45deg, #3498db, #2980b9);
            color: white;
        }

        .btn-secondary {
            background: linear-gradient(45deg, #95a5a6, #7f8c8d);
            color: white;
        }

        .btn-success {
            background: linear-gradient(45deg, #27ae60, #2ecc71);
            color: white;
        }

        .btn:disabled {
            background: linear-gradient(45deg, #bdc3c7, #95a5a6);
            cursor: not-allowed;
            transform: none !important;
        }

        .btn:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }

        .btn:active:not(:disabled) {
            transform: translateY(0);
        }

        .rules {
            background: #f8f9fa;
            border-radius: 12px;
            padding: 20px;
            margin-top: 20px;
            border-left: 4px solid #3498db;
        }

        .rules h3 {
            color: #2c3e50;
            margin-bottom: 15px;
            font-size: 18px;
        }

        .rules ul {
            list-style: none;
            padding: 0;
        }

        .rules li {
            margin: 8px 0;
            padding-left: 20px;
            position: relative;
            color: #34495e;
            line-height: 1.5;
        }

        .rules li:before {
            content: "•";
            color: #3498db;
            font-weight: bold;
            position: absolute;
            left: 0;
        }

        .status {
            text-align: center;
            margin: 15px 0;
            font-size: 18px;
            font-weight: 600;
            min-height: 25px;
        }

        .status.success {
            color: #27ae60;
        }

        .status.error {
            color: #e74c3c;
        }

        .symbol-selector {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin: 20px 0;
        }

        .symbol-btn {
            width: 60px;
            height: 60px;
            border: 3px solid #bdc3c7;
            border-radius: 50%;
            background: white;
            font-size: 28px;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .symbol-btn:hover {
            border-color: #3498db;
            transform: scale(1.1);
        }

        .symbol-btn.active {
            border-color: #3498db;
            background: #3498db;
            color: white;
        }

        .progress {
            width: 100%;
            height: 8px;
            background: #ecf0f1;
            border-radius: 4px;
            overflow: hidden;
            margin: 15px 0;
        }

        .progress-bar {
            height: 100%;
            background: linear-gradient(45deg, #3498db, #2ecc71);
            width: 0%;
            transition: width 0.3s ease;
        }

        .fun-fact {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 15px;
            margin: 20px 0;
            text-align: center;
            animation: fadeIn 1s ease-in-out;
        }

        .fun-fact h3 {
            margin-bottom: 10px;
            font-size: 20px;
        }

        .fun-fact p {
            line-height: 1.6;
            font-size: 16px;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .level-selector {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin: 20px 0;
        }

        .level-btn {
            width: 40px;
            height: 40px;
            border: 2px solid #bdc3c7;
            border-radius: 50%;
            background: white;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .level-btn.completed {
            background: #27ae60;
            color: white;
            border-color: #27ae60;
        }

        .level-btn.current {
            background: #3498db;
            color: white;
            border-color: #3498db;
        }

        .level-btn:disabled {
            background: #ecf0f1;
            cursor: not-allowed;
            opacity: 0.5;
        }

        .celebration {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 1000;
        }

        .confetti {
            position: absolute;
            width: 10px;
            height: 10px;
            background: #3498db;
            animation: confetti 3s ease-out forwards;
        }

        @keyframes confetti {
            0% {
                transform: translateY(-100vh) rotate(0deg);
                opacity: 1;
            }
            100% {
                transform: translateY(100vh) rotate(720deg);
                opacity: 0;
            }
        }
    </style>
</head>
<body>
    <div class="game-container">
        <h1 class="game-title">Symbol Sudoku</h1>
        
        <div class="level-info" id="levelInfo">
            Level 1: Easy (4×4) - Fill with ☀️ and 🌙
        </div>

        <div class="level-selector" id="levelSelector">
            <button class="level-btn current" id="level1" onclick="selectLevel(1)">1</button>
            <button class="level-btn" id="level2" onclick="selectLevel(2)" disabled>2</button>
            <button class="level-btn" id="level3" onclick="selectLevel(3)" disabled>3</button>
            <button class="level-btn" id="level4" onclick="selectLevel(4)" disabled>4</button>
        </div>
        
        <div class="progress">
            <div class="progress-bar" id="progressBar"></div>
        </div>
        
        <div class="status" id="status"></div>
        
        <div class="grid size-4" id="gameGrid"></div>
        
        <div class="symbol-selector">
            <button class="symbol-btn active" id="sunBtn" data-symbol="☀️">☀️</button>
            <button class="symbol-btn" id="moonBtn" data-symbol="🌙">🌙</button>
            <button class="symbol-btn" id="eraseBtn" data-symbol="">✖️</button>
        </div>
        
        <div class="controls">
            <button class="btn btn-primary" onclick="newGame()">New Puzzle</button>
            <button class="btn btn-secondary" onclick="getHint()">Hint</button>
            <button class="btn btn-secondary" onclick="checkSolution()">Check Rules</button>
            <button class="btn btn-success" id="nextLevelBtn" onclick="nextLevel()" style="display: none;">Next Level</button>
        </div>

        <div id="funFactContainer"></div>
        
        <div class="rules">
            <h3>How to Play</h3>
            <ul>
                <li>Fill the grid with suns ☀️ and moons 🌙</li>
                <li>Each row and column must have equal numbers of each symbol</li>
                <li>No more than 2 consecutive identical symbols in any row or column</li>
                <li>= means cells should have the same symbol</li>
                <li>✗ means cells should have different symbols</li>
                <li>Complete each level to unlock the next one!</li>
            </ul>
        </div>
    </div>

    <div class="celebration" id="celebration"></div>

    <script>
        let currentLevel = 1;
        let completedLevels = [];
        let grid = [];
        let solution = [];
        let fixedCells = [];
        let selectedSymbol = '☀️';
        let hintsUsed = 0;
        let gridSize = 4;
        let hintMarkers = [];

        const levelConfig = {
            1: { size: 4, name: "Easy", required: 2 },
            2: { size: 5, name: "Medium", required: 2 },
            3: { size: 6, name: "Challenging", required: 3 },
            4: { size: 7, name: "Advanced", required: 3 }
        };

        const businessFacts = [
            {
                title: "🏢 Business Continuity Fundamentals",
                fact: "Business Continuity Planning (BCP) helps organizations prepare for disruptions and maintain critical operations. Just like solving puzzles requires strategy and patience, BCP requires careful planning and regular testing!"
            },
            {
                title: "⚡ Risk Assessment Excellence",
                fact: "Effective BCP starts with identifying potential risks - from natural disasters to cyber attacks. Like placing symbols strategically in our puzzle, businesses must strategically plan for various scenarios to ensure resilience."
            },
            {
                title: "🔄 Recovery Time Objectives",
                fact: "BCP defines Recovery Time Objectives (RTO) - the maximum time a business can be down before facing serious consequences. This mirrors our puzzle-solving approach: systematic, time-conscious, and goal-oriented!"
            },
            {
                title: "🎯 Crisis Management Mastery",
                fact: "Advanced BCP includes crisis communication strategies and alternative work arrangements. Just as you've mastered complex symbol patterns, organizations must master the art of adapting to unexpected challenges while maintaining operations!"
            }
        ];

        // Enhanced puzzle generation for different sizes
        function generatePuzzle(size) {
            const required = levelConfig[currentLevel].required;
            const total = size * size;
            const sunCount = Math.floor(total / 2);
            const moonCount = total - sunCount;

            // Generate a valid solution
            const solution = generateValidSolution(size);
            
            // Create initial puzzle by removing some symbols
            const initial = solution.map(row => [...row]);
            const cellsToRemove = Math.floor(total * 0.6); // Remove 60% of cells
            
            for (let i = 0; i < cellsToRemove; i++) {
                const row = Math.floor(Math.random() * size);
                const col = Math.floor(Math.random() * size);
                initial[row][col] = '';
            }

            return { initial, solution };
        }

        function generateValidSolution(size) {
            const solution = Array(size).fill().map(() => Array(size).fill(''));
            const symbols = ['☀️', '🌙'];
            
            // Simple backtracking algorithm to generate valid solution
            function isValid(grid, row, col, symbol) {
                // Check row count
                const rowCount = grid[row].filter(cell => cell === symbol).length;
                if (rowCount >= Math.ceil(size / 2)) return false;
                
                // Check column count
                const colCount = grid.map(r => r[col]).filter(cell => cell === symbol).length;
                if (colCount >= Math.ceil(size / 2)) return false;
                
                // Check consecutive in row
                if (col >= 2 && grid[row][col-1] === symbol && grid[row][col-2] === symbol) return false;
                if (col >= 1 && col < size-1 && grid[row][col-1] === symbol && grid[row][col+1] === symbol) return false;
                if (col <= size-3 && grid[row][col+1] === symbol && grid[row][col+2] === symbol) return false;
                
                // Check consecutive in column
                if (row >= 2 && grid[row-1][col] === symbol && grid[row-2][col] === symbol) return false;
                if (row >= 1 && row < size-1 && grid[row-1][col] === symbol && grid[row+1][col] === symbol) return false;
                if (row <= size-3 && grid[row+1][col] === symbol && grid[row+2][col] === symbol) return false;
                
                return true;
            }

            function solve(row, col) {
                if (row === size) return true;
                if (col === size) return solve(row + 1, 0);
                
                for (const symbol of symbols) {
                    if (isValid(solution, row, col, symbol)) {
                        solution[row][col] = symbol;
                        if (solve(row, col + 1)) return true;
                        solution[row][col] = '';
                    }
                }
                return false;
            }

            solve(0, 0);
            return solution;
        }

        function initGame() {
            updateLevelDisplay();
            createGrid();
            newGame();
        }

        function createGrid() {
            const gameGrid = document.getElementById('gameGrid');
            gameGrid.innerHTML = '';
            gameGrid.className = `grid size-${gridSize}`;
            
            for (let i = 0; i < gridSize; i++) {
                for (let j = 0; j < gridSize; j++) {
                    const cell = document.createElement('button');
                    cell.className = 'cell';
                    cell.dataset.row = i;
                    cell.dataset.col = j;
                    cell.onclick = () => cellClick(i, j);
                    gameGrid.appendChild(cell);
                }
            }
            
            addHintMarkers();
        }

        function addHintMarkers() {
            const gameGrid = document.getElementById('gameGrid');
            const cells = gameGrid.querySelectorAll('.cell');
            
            // Add some random hint markers for demonstration
            const markerCount = Math.min(6, Math.floor(gridSize * gridSize * 0.3));
            const usedPositions = new Set();
            
            for (let i = 0; i < markerCount; i++) {
                let row, col;
                do {
                    row = Math.floor(Math.random() * gridSize);
                    col = Math.floor(Math.random() * gridSize);
                } while (usedPositions.has(`${row},${col}`));
                
                usedPositions.add(`${row},${col}`);
                const cellIndex = row * gridSize + col;
                const cell = cells[cellIndex];
                
                const marker = document.createElement('div');
                marker.className = `hint-marker ${Math.random() > 0.5 ? 'same' : 'opposite'}`;
                marker.textContent = marker.className.includes('same') ? '=' : '✗';
                cell.appendChild(marker);
            }
        }

        function selectLevel(level) {
            if (level <= Math.max(1, completedLevels.length + 1)) {
                currentLevel = level;
                gridSize = levelConfig[level].size;
                updateLevelDisplay();
                createGrid();
                newGame();
            }
        }

        function updateLevelDisplay() {
            const levelInfo = document.getElementById('levelInfo');
            const config = levelConfig[currentLevel];
            levelInfo.textContent = `Level ${currentLevel}: ${config.name} (${config.size}×${config.size}) - Fill with ☀️ and 🌙`;
            
            // Update level buttons
            for (let i = 1; i <= 4; i++) {
                const btn = document.getElementById(`level${i}`);
                btn.className = 'level-btn';
                btn.disabled = i > Math.max(1, completedLevels.length + 1);
                
                if (completedLevels.includes(i)) {
                    btn.classList.add('completed');
                } else if (i === currentLevel) {
                    btn.classList.add('current');
                }
            }
        }

        function newGame() {
            hintsUsed = 0;
            const puzzle = generatePuzzle(gridSize);
            
            grid = puzzle.initial.map(row => [...row]);
            solution = puzzle.solution.map(row => [...row]);
            
            // Track fixed cells
            fixedCells = [];
            for (let i = 0; i < gridSize; i++) {
                for (let j = 0; j < gridSize; j++) {
                    if (grid[i][j] !== '') {
                        fixedCells.push(`${i},${j}`);
                    }
                }
            }
            
            updateDisplay();
            updateStatus('');
            updateProgress();
            hideFunFact();
            document.getElementById('nextLevelBtn').style.display = 'none';
        }

        function cellClick(row, col) {
            if (fixedCells.includes(`${row},${col}`)) return;
            
            clearErrors();
            
            if (selectedSymbol === '') {
                grid[row][col] = '';
            } else {
                grid[row][col] = selectedSymbol;
            }
            
            updateDisplay();
            updateProgress();
            
            // Check for rule violations in real-time
            checkRuleViolations(row, col);
            
            if (checkWin()) {
                completeLevel();
            }
        }

        function checkRuleViolations(changedRow, changedCol) {
            clearViolations();
            const violations = [];
            
            // Check the affected row and column for violations
            const rowViolations = checkRowColumnViolations(changedRow, changedCol);
            violations.push(...rowViolations);
            
            if (violations.length > 0) {
                showViolations(violations);
            }
        }

        function checkRowColumnViolations(row, col) {
            const violations = [];
            
            // Check row for consecutive symbols
            for (let j = 0; j <= gridSize - 3; j++) {
                if (grid[row][j] !== '' && grid[row][j] === grid[row][j+1] && grid[row][j+1] === grid[row][j+2]) {
                    violations.push(`${row},${j}`, `${row},${j+1}`, `${row},${j+2}`);
                }
            }
            
            // Check column for consecutive symbols
            for (let i = 0; i <= gridSize - 3; i++) {
                if (grid[i][col] !== '' && grid[i][col] === grid[i+1][col] && grid[i+1][col] === grid[i+2][col]) {
                    violations.push(`${i},${col}`, `${i+1},${col}`, `${i+2},${col}`);
                }
            }
            
            return violations;
        }

        function showViolations(violationCells) {
            const cells = document.querySelectorAll('.cell');
            violationCells.forEach(cellPos => {
                const [row, col] = cellPos.split(',').map(Number);
                const index = row * gridSize + col;
                if (cells[index]) {
                    cells[index].classList.add('violation');
                }
            });
            
            setTimeout(clearViolations, 1500);
        }

        function clearViolations() {
            document.querySelectorAll('.cell').forEach(cell => {
                cell.classList.remove('violation');
            });
        }

        function completeLevel() {
            if (!completedLevels.includes(currentLevel)) {
                completedLevels.push(currentLevel);
            }
            
            createCelebration();
            updateStatus('🎉 Level Complete! Excellent work!', 'success');
            showFunFact();
            updateLevelDisplay();
            
            if (currentLevel < 4) {
                document.getElementById('nextLevelBtn').style.display = 'inline-block';
            }
        }

        function nextLevel() {
            if (currentLevel < 4) {
                selectLevel(currentLevel + 1);
            }
        }

        function showFunFact() {
            const container = document.getElementById('funFactContainer');
            const fact = businessFacts[currentLevel - 1];
            
            container.innerHTML = `
                <div class="fun-fact">
                    <h3>${fact.title}</h3>
                    <p>${fact.fact}</p>
                </div>
            `;
        }

        function hideFunFact() {
            document.getElementById('funFactContainer').innerHTML = '';
        }

        function createCelebration() {
            const celebration = document.getElementById('celebration');
            celebration.innerHTML = '';
            
            const colors = ['#3498db', '#e74c3c', '#f39c12', '#27ae60', '#9b59b6'];
            
            for (let i = 0; i < 50; i++) {
                const confetti = document.createElement('div');
                confetti.className = 'confetti';
                confetti.style.left = Math.random() * 100 + '%';
                confetti.style.background = colors[Math.floor(Math.random() * colors.length)];
                confetti.style.animationDelay = Math.random() * 3 + 's';
                celebration.appendChild(confetti);
            }
            
            setTimeout(() => {
                celebration.innerHTML = '';
            }, 3000);
        }

        function updateDisplay() {
            const cells = document.querySelectorAll('.cell');
            cells.forEach((cell, index) => {
                const row = Math.floor(index / gridSize);
                const col = index % gridSize;
                
                // Clear existing content except hint markers
                const markers = cell.querySelectorAll('.hint-marker');
                cell.textContent = grid[row][col];
                
                // Re-add markers
                markers.forEach(marker => cell.appendChild(marker));
                
                cell.className = 'cell';
                
                if (fixedCells.includes(`${row},${col}`)) {
                    cell.classList.add('fixed');
                }
            });
        }

        function selectSymbol(symbol) {
            selectedSymbol = symbol;
            document.querySelectorAll('.symbol-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            
            if (symbol === '☀️') {
                document.getElementById('sunBtn').classList.add('active');
            } else if (symbol === '🌙') {
                document.getElementById('moonBtn').classList.add('active');
            } else {
                document.getElementById('eraseBtn').classList.add('active');
            }
        }

        function checkSolution() {
            clearErrors();
            clearViolations();
            const errors = [];
            const required = Math.floor(gridSize / 2);
            
            // Check rows and columns
            for (let i = 0; i < gridSize; i++) {
                // Check row
                const rowSuns = grid[i].filter(cell => cell === '☀️').length;
                const rowMoons = grid[i].filter(cell => cell === '🌙').length;
                
                if (grid[i].every(cell => cell !== '')) {
                    if (Math.abs(rowSuns - rowMoons) > 1) {
                        for (let j = 0; j < gridSize; j++) {
                            errors.push(`${i},${j}`);
                        }
                    }
                }
                
                // Check column
                const colSuns = grid.map(row => row[i]).filter(cell => cell === '☀️').length;
                const colMoons = grid.map(row => row[i]).filter(cell => cell === '🌙').length;
                
                if (grid.every(row => row[i] !== '')) {
                    if (Math.abs(colSuns - colMoons) > 1) {
                        for (let j = 0; j < gridSize; j++) {
                            errors.push(`${j},${i}`);
                        }
                    }
                }
            }
            
            // Check consecutive symbols
            for (let i = 0; i < gridSize; i++) {
                for (let j = 0; j <= gridSize - 3; j++) {
                    if (grid[i][j] !== '' && grid[i][j] === grid[i][j+1] && grid[i][j+1] === grid[i][j+2]) {
                        errors.push(`${i},${j}`, `${i},${j+1}`, `${i},${j+2}`);
                    }
                    if (grid[j][i] !== '' && grid[j][i] === grid[j+1][i] && grid[j+1][i] === grid[j+2][i]) {
                        errors.push(`${j},${i}`, `${j+1},${i}`, `${j+2},${i}`);
                    }
