<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Symbol Sudoku - Multi-Level Logic Puzzle</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            position: relative;
            overflow-x: auto;
        }

        .game-container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            box-shadow: 0 25px 50px rgba(0,0,0,0.2);
            padding: 30px;
            max-width: 600px;
            width: 100%;
            margin-bottom: 20px;
        }

        .game-title {
            text-align: center;
            font-size: 32px;
            font-weight: 700;
            color: #2c3e50;
            margin-bottom: 10px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .level-indicator {
            text-align: center;
            font-size: 18px;
            font-weight: 600;
            color: #34495e;
            margin-bottom: 20px;
            padding: 10px 20px;
            background: linear-gradient(45deg, #f39c12, #e67e22);
            color: white;
            border-radius: 25px;
            display: inline-block;
            margin-left: 50%;
            transform: translateX(-50%);
        }

        .grid-container {
            display: flex;
            justify-content: center;
            margin: 20px 0;
            position: relative;
        }

        .grid {
            display: grid;
            gap: 2px;
            background: #2c3e50;
            padding: 3px;
            border-radius: 12px;
            position: relative;
        }

        .grid-4x4 { grid-template-columns: repeat(4, 1fr); max-width: 320px; }
        .grid-5x5 { grid-template-columns: repeat(5, 1fr); max-width: 400px; }
        .grid-6x6 { grid-template-columns: repeat(6, 1fr); max-width: 480px; }
        .grid-7x7 { grid-template-columns: repeat(7, 1fr); max-width: 560px; }

        .cell {
            aspect-ratio: 1;
            background: #ecf0f1;
            border: none;
            border-radius: 6px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 28px;
            cursor: pointer;
            transition: all 0.2s ease;
            position: relative;
            min-height: 50px;
        }

        .cell:hover {
            background: #d5dbdb;
            transform: scale(1.05);
        }

        .cell.fixed {
            background: #bdc3c7;
            cursor: default;
            font-weight: bold;
        }

        .cell.fixed:hover {
            transform: none;
        }

        .cell.error {
            background: #e74c3c !important;
            color: white;
            animation: shake 0.6s ease-in-out;
        }

        .cell.hint {
            background: #f39c12 !important;
            color: white;
            animation: pulse 1s ease-in-out;
        }

        .cell.success {
            background: #27ae60 !important;
            color: white;
            animation: celebrate 0.8s ease-in-out;
        }

        @keyframes shake {
            0%, 100% { transform: translateX(0) scale(1); }
            10%, 30%, 50%, 70%, 90% { transform: translateX(-5px) scale(1.1); }
            20%, 40%, 60%, 80% { transform: translateX(5px) scale(1.1); }
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.1); }
        }

        @keyframes celebrate {
            0%, 100% { transform: scale(1) rotate(0deg); }
            25% { transform: scale(1.2) rotate(-5deg); }
            75% { transform: scale(1.2) rotate(5deg); }
        }

        .hint-symbol {
            position: absolute;
            font-size: 12px;
            background: rgba(52, 73, 94, 0.8);
            color: white;
            padding: 2px 4px;
            border-radius: 3px;
            pointer-events: none;
        }

        .hint-symbol.same {
            top: -8px;
            left: 50%;
            transform: translateX(-50%);
        }

        .hint-symbol.opposite {
            bottom: -8px;
            right: -8px;
        }

        .symbol-selector {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin: 20px 0;
        }

        .symbol-btn {
            width: 60px;
            height: 60px;
            border: 3px solid #bdc3c7;
            border-radius: 50%;
            background: white;
            font-size: 28px;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .symbol-btn:hover {
            border-color: #667eea;
            transform: scale(1.1);
        }

        .symbol-btn.active {
            border-color: #667eea;
            background: #667eea;
            color: white;
        }

        .controls {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin: 20px 0;
            flex-wrap: wrap;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 25px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .btn-primary {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
        }

        .btn-secondary {
            background: linear-gradient(45deg, #95a5a6, #7f8c8d);
            color: white;
        }

        .btn-success {
            background: linear-gradient(45deg, #27ae60, #2ecc71);
            color: white;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }

        .btn:active {
            transform: translateY(0);
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        .status {
            text-align: center;
            margin: 15px 0;
            font-size: 18px;
            font-weight: 600;
            min-height: 25px;
        }

        .status.success {
            color: #27ae60;
        }

        .status.error {
            color: #e74c3c;
        }

        .progress {
            width: 100%;
            height: 8px;
            background: #ecf0f1;
            border-radius: 4px;
            overflow: hidden;
            margin: 15px 0;
        }

        .progress-bar {
            height: 100%;
            background: linear-gradient(45deg, #667eea, #764ba2);
            width: 0%;
            transition: width 0.3s ease;
        }

        .rules {
            background: linear-gradient(45deg, #f8f9fa, #e9ecef);
            border-radius: 12px;
            padding: 20px;
            margin-top: 20px;
            border-left: 4px solid #667eea;
        }

        .rules h3 {
            color: #2c3e50;
            margin-bottom: 15px;
            font-size: 18px;
        }

        .rules ul {
            list-style: none;
            padding: 0;
        }

        .rules li {
            margin: 8px 0;
            padding-left: 20px;
            position: relative;
            color: #34495e;
            line-height: 1.5;
        }

        .rules li:before {
            content: "•";
            color: #667eea;
            font-weight: bold;
            position: absolute;
            left: 0;
        }

        .fun-fact {
            background: linear-gradient(45deg, #3498db, #2980b9);
            color: white;
            border-radius: 15px;
            padding: 20px;
            margin: 20px 0;
            text-align: center;
            font-size: 16px;
            line-height: 1.6;
            box-shadow: 0 10px 20px rgba(52, 152, 219, 0.3);
            transform: scale(0);
            transition: transform 0.5s ease;
        }

        .fun-fact.show {
            transform: scale(1);
            animation: bounceIn 0.6s ease;
        }

        @keyframes bounceIn {
            0% { transform: scale(0.3); opacity: 0; }
            50% { transform: scale(1.05); }
            70% { transform: scale(0.9); }
            100% { transform: scale(1); opacity: 1; }
        }

        .fun-fact h4 {
            margin-bottom: 10px;
            font-size: 18px;
            font-weight: 700;
        }

        .level-completion {
            text-align: center;
            padding: 30px;
            background: linear-gradient(45deg, #27ae60, #2ecc71);
            color: white;
            border-radius: 15px;
            margin: 20px 0;
            display: none;
        }

        .level-completion.show {
            display: block;
            animation: slideIn 0.5s ease;
        }

        @keyframes slideIn {
            from { transform: translateY(-50px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        .download-btn {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 10px 20px;
            background: linear-gradient(45deg, #e74c3c, #c0392b);
            color: white;
            border: none;
            border-radius: 20px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            z-index: 1000;
        }

        .download-btn:hover {
            transform: scale(1.05);
            box-shadow: 0 5px 15px rgba(231, 76, 60, 0.3);
        }
    </style>
</head>
<body>
    <button class="download-btn" onclick="downloadGame()">📥 Download Game</button>
    
    <div class="game-container">
        <h1 class="game-title">Symbol Sudoku</h1>
        
        <div class="level-indicator" id="levelIndicator">Level 1 - Easy (4×4)</div>
        
        <div class="progress">
            <div class="progress-bar" id="progressBar"></div>
        </div>
        
        <div class="status" id="status"></div>
        
        <div class="grid-container">
            <div class="grid grid-4x4" id="gameGrid"></div>
        </div>
        
        <div class="symbol-selector">
            <button class="symbol-btn active" id="sunBtn" data-symbol="☀️">☀️</button>
            <button class="symbol-btn" id="moonBtn" data-symbol="🌙">🌙</button>
            <button class="symbol-btn" id="eraseBtn" data-symbol="">✖️</button>
        </div>
        
        <div class="controls">
            <button class="btn btn-primary" onclick="newGame()">New Puzzle</button>
            <button class="btn btn-secondary" onclick="getHint()">Hint</button>
            <button class="btn btn-secondary" onclick="checkSolution()">Check</button>
            <button class="btn btn-success" id="nextLevelBtn" onclick="nextLevel()" style="display: none;">Next Level</button>
        </div>
        
        <div class="level-completion" id="levelCompletion">
            <h2>🎉 Level Completed!</h2>
            <p>Congratulations on completing this level!</p>
        </div>
        
        <div class="fun-fact" id="funFact">
            <h4>💡 Business Continuity Tip</h4>
            <p id="funFactText"></p>
        </div>
        
        <div class="rules">
            <h3>How to Play</h3>
            <ul id="rulesList">
                <li>Fill the 4×4 grid with suns ☀️ and moons 🌙</li>
                <li>Each row and column must contain exactly 2 suns and 2 moons</li>
                <li>No more than 2 consecutive identical symbols in any row or column</li>
                <li>Click a symbol above, then click empty cells to place it</li>
                <li>Use the eraser ✖️ to remove symbols</li>
                <li>= means same symbols should be adjacent, ✕ means different symbols should be adjacent</li>
            </ul>
        </div>
    </div>

    <script>
        let currentLevel = 1;
        let maxUnlockedLevel = 1;
        let grid = [];
        let solution = [];
        let fixedCells = [];
        let selectedSymbol = '☀️';
        let hintsUsed = 0;
        let gridSize = 4;

        const levelConfig = {
            1: { size: 4, name: "Easy", pairs: 2 },
            2: { size: 5, name: "Medium", pairs: 2 }, // 5x5 with 2-3 pattern
            3: { size: 6, name: "Challenging", pairs: 3 },
            4: { size: 7, name: "Advanced", pairs: 3 } // 7x7 with 3-4 pattern
        };

        const businessContinuityFacts = [
            "A Business Continuity Plan (BCP) ensures your organization can continue operating during disruptions. Just like solving puzzles step by step, BCPs require systematic planning and execution.",
            "Risk assessment is the foundation of any BCP - identify potential threats before they become problems. Similar to how you analyze symbol patterns before placing them!",
            "Regular testing and updates of your BCP are crucial. Like mastering these puzzle levels, practice makes perfect in emergency preparedness.",
            "Communication plans are vital during business disruptions. Clear protocols help teams coordinate effectively, just like following puzzle rules leads to success!"
        ];

        // Enhanced puzzle sets for different levels
        const puzzles = {
            1: [ // 4x4 Easy
                {
                    initial: [
                        ['☀️', '', '🌙', ''],
                        ['', '', '', '☀️'],
                        ['', '🌙', '', ''],
                        ['', '☀️', '', '🌙']
                    ],
                    solution: [
                        ['☀️', '🌙', '🌙', '☀️'],
                        ['🌙', '☀️', '☀️', '🌙'],
                        ['☀️', '🌙', '☀️', '🌙'],
                        ['🌙', '☀️', '🌙', '☀️']
                    ],
                    hints: {
                        same: [[0,0,0,1], [1,2,1,3]],
                        opposite: [[0,1,1,1], [2,0,2,1]]
                    }
                },
                {
                    initial: [
                        ['', '☀️', '', '🌙'],
                        ['🌙', '', '☀️', ''],
                        ['', '', '🌙', '☀️'],
                        ['☀️', '🌙', '', '']
                    ],
                    solution: [
                        ['☀️', '☀️', '🌙', '🌙'],
                        ['🌙', '🌙', '☀️', '☀️'],
                        ['🌙', '☀️', '🌙', '☀️'],
                        ['☀️', '🌙', '☀️', '🌙']
                    ],
                    hints: {
                        same: [[0,0,0,1], [1,0,1,1]],
                        opposite: [[0,2,1,2], [2,1,3,1]]
                    }
                }
            ],
            2: [ // 5x5 Medium
                {
                    initial: [
                        ['☀️', '', '🌙', '', '☀️'],
                        ['', '🌙', '', '☀️', ''],
                        ['🌙', '', '', '', '🌙'],
                        ['', '☀️', '', '🌙', ''],
                        ['☀️', '', '🌙', '', '☀️']
                    ],
                    solution: [
                        ['☀️', '☀️', '🌙', '🌙', '☀️'],
                        ['🌙', '🌙', '☀️', '☀️', '🌙'],
                        ['🌙', '☀️', '🌙', '☀️', '🌙'],
                        ['☀️', '☀️', '🌙', '🌙', '☀️'],
                        ['☀️', '🌙', '🌙', '☀️', '☀️']
                    ],
                    hints: {
                        same: [[0,0,0,1], [1,0,1,1], [3,0,3,1]],
                        opposite: [[0,2,1,2], [2,1,2,2], [4,1,4,2]]
                    }
                }
            ],
            3: [ // 6x6 Challenging
                {
                    initial: [
                        ['☀️', '', '🌙', '', '☀️', ''],
                        ['', '🌙', '', '☀️', '', '🌙'],
                        ['🌙', '', '', '', '🌙', ''],
                        ['', '☀️', '', '🌙', '', '☀️'],
                        ['☀️', '', '🌙', '', '☀️', ''],
                        ['', '🌙', '', '☀️', '', '🌙']
                    ],
                    solution: [
                        ['☀️', '☀️', '🌙', '🌙', '☀️', '🌙'],
                        ['🌙', '🌙', '☀️', '☀️', '🌙', '🌙'],
                        ['🌙', '☀️', '🌙', '☀️', '🌙', '☀️'],
                        ['☀️', '☀️', '🌙', '🌙', '☀️', '☀️'],
                        ['☀️', '🌙', '🌙', '☀️', '☀️', '🌙'],
                        ['🌙', '🌙', '☀️', '☀️', '🌙', '🌙']
                    ],
                    hints: {
                        same: [[0,0,0,1], [1,0,1,1], [3,0,3,1], [4,3,4,4]],
                        opposite: [[0,2,1,2], [2,1,2,2], [5,1,5,2]]
                    }
                }
            ],
            4: [ // 7x7 Advanced
                {
                    initial: [
                        ['☀️', '', '🌙', '', '☀️', '', '🌙'],
                        ['', '🌙', '', '☀️', '', '🌙', ''],
                        ['🌙', '', '', '', '🌙', '', '☀️'],
                        ['', '☀️', '', '🌙', '', '☀️', ''],
                        ['☀️', '', '🌙', '', '', '', '🌙'],
                        ['', '🌙', '', '☀️', '', '🌙', ''],
                        ['🌙', '', '☀️', '', '🌙', '', '☀️']
                    ],
                    solution: [
                        ['☀️', '☀️', '🌙', '🌙', '☀️', '☀️', '🌙'],
                        ['🌙', '🌙', '☀️', '☀️', '🌙', '🌙', '☀️'],
                        ['🌙', '☀️', '🌙', '☀️', '🌙', '☀️', '☀️'],
                        ['☀️', '☀️', '🌙', '🌙', '☀️', '☀️', '🌙'],
                        ['☀️', '🌙', '🌙', '☀️', '☀️', '🌙', '🌙'],
                        ['🌙', '🌙', '☀️', '☀️', '🌙', '🌙', '☀️'],
                        ['🌙', '☀️', '☀️', '🌙', '🌙', '☀️', '☀️']
                    ],
                    hints: {
                        same: [[0,0,0,1], [1,0,1,1], [3,0,3,1], [4,3,4,4], [6,1,6,2], [6,4,6,5]],
                        opposite: [[0,2,1,2], [2,1,2,2], [5,2,5,3]]
                    }
                }
            ]
        };

        function initGame() {
            createGrid();
            newGame();
        }

        function createGrid() {
            const gameGrid = document.getElementById('gameGrid');
            const config = levelConfig[currentLevel];
            gridSize = config.size;
            
            gameGrid.innerHTML = '';
            gameGrid.className = `grid grid-${gridSize}x${gridSize}`;
            
            // Initialize grid array
            grid = Array(gridSize).fill().map(() => Array(gridSize).fill(''));
            
            for (let i = 0; i < gridSize; i++) {
                for (let j = 0; j < gridSize; j++) {
                    const cell = document.createElement('button');
                    cell.className = 'cell';
                    cell.dataset.row = i;
                    cell.dataset.col = j;
                    cell.onclick = () => cellClick(i, j);
                    gameGrid.appendChild(cell);
                }
            }
        }

        function newGame() {
            hintsUsed = 0;
            const levelPuzzles = puzzles[currentLevel];
            const puzzle = levelPuzzles[Math.floor(Math.random() * levelPuzzles.length)];
            
            // Copy initial state and solution
            grid = puzzle.initial.map(row => [...row]);
            solution = puzzle.solution.map(row => [...row]);
            
            // Track fixed cells
            fixedCells = [];
            for (let i = 0; i < gridSize; i++) {
                for (let j = 0; j < gridSize; j++) {
                    if (grid[i][j] !== '') {
                        fixedCells.push(`${i},${j}`);
                    }
                }
            }
            
            updateDisplay();
            addHintSymbols(puzzle.hints);
            updateStatus('');
            updateProgress();
            updateLevelIndicator();
            updateRules();
            
            // Hide level completion and fun fact
            document.getElementById('levelCompletion').classList.remove('show');
            document.getElementById('funFact').classList.remove('show');
            document.getElementById('nextLevelBtn').style.display = 'none';
        }

        function addHintSymbols(hints) {
            // Clear existing hint symbols
            document.querySelectorAll('.hint-symbol').forEach(el => el.remove());
            
            const cells = document.querySelectorAll('.cell');
            
            // Add same symbol hints (=)
            if (hints.same) {
                hints.same.forEach(([r1, c1, r2, c2]) => {
                    const index1 = r1 * gridSize + c1;
                    const index2 = r2 * gridSize + c2;
                    
                    if (cells[index1] && cells[index2]) {
                        const hintEl = document.createElement('div');
                        hintEl.className = 'hint-symbol same';
                        hintEl.textContent = '=';
                        
                        // Position between cells
                        if (r1 === r2) { // Same row
                            const leftCell = c1 < c2 ? cells[index1] : cells[index2];
                            hintEl.style.position = 'absolute';
                            hintEl.style.left = '100%';
                            hintEl.style.top = '50%';
                            hintEl.style.transform = 'translate(-50%, -50%)';
                            leftCell.appendChild(hintEl);
                        } else { // Same column
                            const topCell = r1 < r2 ? cells[index1] : cells[index2];
                            hintEl.style.position = 'absolute';
                            hintEl.style.top = '100%';
                            hintEl.style.left = '50%';
                            hintEl.style.transform = 'translate(-50%, -50%)';
                            topCell.appendChild(hintEl);
                        }
                    }
                });
            }
            
            // Add opposite symbol hints (✕)
            if (hints.opposite) {
                hints.opposite.forEach(([r1, c1, r2, c2]) => {
                    const index1 = r1 * gridSize + c1;
                    const index2 = r2 * gridSize + c2;
                    
                    if (cells[index1] && cells[index2]) {
                        const hintEl = document.createElement('div');
                        hintEl.className = 'hint-symbol opposite';
                        hintEl.textContent = '✕';
                        
                        // Position between cells
                        if (r1 === r2) { // Same row
                            const leftCell = c1 < c2 ? cells[index1] : cells[index2];
                            hintEl.style.position = 'absolute';
                            hintEl.style.left = '100%';
                            hintEl.style.top = '50%';
                            hintEl.style.transform = 'translate(-50%, -50%)';
                            leftCell.appendChild(hintEl);
                        } else { // Same column
                            const topCell = r1 < r2 ? cells[index1] : cells[index2];
                            hintEl.style.position = 'absolute';
                            hintEl.style.top = '100%';
                            hintEl.style.left = '50%';
                            hintEl.style.transform = 'translate(-50%, -50%)';
                            topCell.appendChild(hintEl);
                        }
                    }
                });
            }
        }

        function cellClick(row, col) {
            if (fixedCells.includes(`${row},${col}`)) return;
            
            // Clear any previous error states
            clearErrors();
            
            if (selectedSymbol === '') {
                grid[row][col] = '';
            } else {
                grid[row][col] = selectedSymbol;
            }
            
            updateDisplay();
            updateProgress();
            
            if (checkWin()) {
                completeLevel();
            }
        }

        function updateDisplay() {
            const cells = document.querySelectorAll('.cell');
            cells.forEach((cell, index) => {
                const row = Math.floor(index / gridSize);
                const col = index % gridSize;
                
                cell.textContent = grid[row][col];
                cell.className = 'cell';
                
                if (fixedCells.includes(`${row},${col}`)) {
                    cell.classList.add('fixed');
                }
            });
        }

        function selectSymbol(symbol) {
            selectedSymbol = symbol;
            document.querySelectorAll('.symbol-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            
            if (symbol === '☀️') {
                document.getElementById('sunBtn').classList.add('active');
            } else if (symbol === '🌙') {
                document.getElementById('moonBtn').classList.add('active');
            } else {
                document.getElementById('eraseBtn').classList.add('active');
            }
        }

        function checkSolution() {
            clearErrors();
            const errors = [];
            const config = levelConfig[currentLevel];
            const expectedCount = Math.floor(gridSize / 2);
            
            // Check rows and columns
            for (let i = 0; i < gridSize; i++) {
                // Check row
                const rowSuns = grid[i].filter(cell => cell === '☀️').length;
                const rowMoons = grid[i].filter(cell => cell === '🌙').length;
                
                if (grid[i].every(cell => cell !== '')) {
                    if (rowSuns !== expectedCount || rowMoons !== expectedCount) {
                        for (let j = 0; j < gridSize; j++) {
                            errors.push(`${i},${j}`);
                        }
                    }
                }
                
                // Check column
                const colSuns = grid.map(row => row[i]).filter(cell => cell === '☀️').length;
                const colMoons = grid.map(row => row[i]).filter(cell => cell === '🌙').length;
                
                if (grid.every(row => row[i] !== '')) {
                    if (colSuns !== expectedCount || colMoons !== expectedCount) {
                        for (let j = 0; j < gridSize; j++) {
                            errors.push(`${j},${i}`);
                        }
                    }
                }
            }
            
            // Check consecutive symbols
            for (let i = 0; i < gridSize; i++) {
                // Check rows for consecutive symbols
                for (let j = 0; j <= gridSize - 3; j++) {
                    if (grid[i][j] !== '' && grid[i][j] === grid[i][j+1] && grid[i][j+1] === grid[i][j+2]) {
                        errors.push(`${i},${j}`, `${i},${j+1}`, `${i},${j+2}`);
                    }
                }
                
                // Check columns for consecutive symbols
                for (let j = 0; j <= gridSize - 3; j++) {
                    if (grid[j][i] !== '' && grid[j][i] === grid[j+1][i] && grid[j+1][i] === grid[j+2][i]) {
                        errors.push(`${j},${i}`, `${j+1},${i}`, `${j+2},${i}`);
                    }
                }
            }

f (errors.length > 0) {
                showErrors(errors);
                updateStatus('❌ There are some errors in your solution', 'error');
            } else if (grid.every(row => row.every(cell => cell !== ''))) {
                updateStatus('✅ Perfect! All rules satisfied!', 'success');
            } else {
                updateStatus('✅ Looking good so far! Keep going!', 'success');
            }
        }

        function showErrors(errorCells) {
            const cells = document.querySelectorAll('.cell');
            errorCells.forEach(cellPos => {
                const [row, col] = cellPos.split(',').map(Number);
                const index = row * gridSize + col;
                if (cells[index]) {
                    cells[index].classList.add('error');
                }
            });
            
            setTimeout(clearErrors, 3000);
        }

        function clearErrors() {
            document.querySelectorAll('.cell').forEach(cell => {
                cell.classList.remove('error', 'hint');
            });
        }

        function getHint() {
            clearErrors();
            
            // Find an empty cell that can be filled
            const emptyCells = [];
            for (let i = 0; i < gridSize; i++) {
                for (let j = 0; j < gridSize; j++) {
                    if (grid[i][j] === '' && !fixedCells.includes(`${i},${j}`)) {
                        emptyCells.push([i, j]);
                    }
                }
            }
            
            if (emptyCells.length === 0) {
                updateStatus('No empty cells to hint!', 'error');
                return;
            }
            
            const [row, col] = emptyCells[Math.floor(Math.random() * emptyCells.length)];
            const cells = document.querySelectorAll('.cell');
            const cellIndex = row * gridSize + col;
            
            cells[cellIndex].classList.add('hint');
            cells[cellIndex].textContent = solution[row][col];
            
            updateStatus(`💡 Hint: Cell in row ${row + 1}, column ${col + 1} should be ${solution[row][col]}`, 'success');
            
            setTimeout(() => {
                cells[cellIndex].classList.remove('hint');
                cells[cellIndex].textContent = grid[row][col];
            }, 4000);
            
            hintsUsed++;
        }

        function checkWin() {
            // Check if grid is complete
            if (!grid.every(row => row.every(cell => cell !== ''))) {
                return false;
            }
            
            // Check if solution matches
            for (let i = 0; i < gridSize; i++) {
                for (let j = 0; j < gridSize; j++) {
                    if (grid[i][j] !== solution[i][j]) {
                        return false;
                    }
                }
            }
            
            return true;
        }

        function completeLevel() {
            // Show success animation
            const cells = document.querySelectorAll('.cell');
            cells.forEach((cell, index) => {
                setTimeout(() => {
                    cell.classList.add('success');
                }, index * 50);
            });
            
            updateStatus('🎉 Level Completed! Excellent work!', 'success');
            
            // Show level completion message
            setTimeout(() => {
                document.getElementById('levelCompletion').classList.add('show');
                
                // Show fun fact
                setTimeout(() => {
                    showFunFact();
                }, 1000);
                
                // Show next level button if not at max level
                if (currentLevel < 4) {
                    maxUnlockedLevel = Math.max(maxUnlockedLevel, currentLevel + 1);
                    document.getElementById('nextLevelBtn').style.display = 'inline-block';
                }
            }, 1500);
        }

        function showFunFact() {
            const funFact = document.getElementById('funFact');
            const funFactText = document.getElementById('funFactText');
            
            funFactText.textContent = businessContinuityFacts[currentLevel - 1];
            funFact.classList.add('show');
        }

        function nextLevel() {
            if (currentLevel < 4 && currentLevel < maxUnlockedLevel) {
                currentLevel++;
                createGrid();
                newGame();
            }
        }

        function updateLevelIndicator() {
            const config = levelConfig[currentLevel];
            const indicator = document.getElementById('levelIndicator');
            indicator.textContent = `Level ${currentLevel} - ${config.name} (${config.size}×${config.size})`;
        }

        function updateRules() {
            const config = levelConfig[currentLevel];
            const rulesList = document.getElementById('rulesList');
            const expectedCount = Math.floor(gridSize / 2);
            
            rulesList.innerHTML = `
                <li>Fill the ${config.size}×${config.size} grid with suns ☀️ and moons 🌙</li>
                <li>Each row and column must contain exactly ${expectedCount} suns and ${expectedCount} moons</li>
                <li>No more than 2 consecutive identical symbols in any row or column</li>
                <li>Click a symbol above, then click empty cells to place it</li>
                <li>Use the eraser ✖️ to remove symbols</li>
                <li>= means same symbols should be adjacent, ✕ means different symbols should be adjacent</li>
            `;
        }

        function updateStatus(message, type = '') {
            const status = document.getElementById('status');
            status.textContent = message;
            status.className = `status ${type}`;
        }

        function updateProgress() {
            const totalCells = gridSize * gridSize;
            const filledCells = grid.flat().filter(cell => cell !== '').length;
            const percentage = (filledCells / totalCells) * 100;
            
            document.getElementById('progressBar').style.width = `${percentage}%`;
        }

        function downloadGame() {
            const htmlContent = document.documentElement.outerHTML;
            const blob = new Blob([htmlContent], { type: 'text/html' });
            const url = URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            a.download = 'symbol-sudoku-game.html';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        // Event listeners for symbol selection
        document.getElementById('sunBtn').onclick = () => selectSymbol('☀️');
        document.getElementById('moonBtn').onclick = () => selectSymbol('🌙');
        document.getElementById('eraseBtn').onclick = () => selectSymbol('');

        // Initialize the game
        initGame();
    </script>
</body>
</html>
